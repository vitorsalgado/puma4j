plugins {
  id "idea"
  id "com.github.spotbugs" version "5.0.0-beta.8" apply false
  id "org.sonarqube" version "3.3"
}

def Version = file("$rootDir/VERSION.txt").text.trim()

apply from: "dependencies.gradle"
apply from: "setup.gradle"

ext {
  isCI = System.getenv("CI") == "true"

  coreProjects = subprojects.findAll {
    p -> !p.name.contains("example") && !p.name.endsWith("-bom")
  }
}

allprojects {
  apply plugin: "jacoco"

  group "io.github.vitorsalgado.puma4j"
  version Version
  description "Easy and convenient way to load file resources into your tests using only annotations."

  repositories {
    mavenCentral()
  }
}

subprojects {
  apply plugin: "java"
  apply plugin: "java-library"
  apply plugin: "checkstyle"
  apply plugin: "pmd"
  apply plugin: "com.github.spotbugs"
  apply from: "${rootDir}/lint.gradle"

  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11

  tasks.withType(JavaCompile) { compileTask ->
    sourceCompatibility = "11"
    targetCompatibility = "11"
    options.encoding = 'UTF-8'
    options.deprecation = true
    options.compilerArgs += ["-Xlint:-deprecation", "-Xlint:unchecked", "-parameters"]
  }

  test {
    useJUnitPlatform()

    testLogging {
      maxParallelForks Runtime.runtime.availableProcessors().intdiv(2) ?: 1
      forkEvery 10
      events "passed", "skipped", "failed"
      showStackTraces true
      exceptionFormat "full"
    }
  }

  spotbugsMain {
    reports {
      html {
        enabled = true
        destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
      }
      xml.enabled = false
    }
  }

  // Common dependencies shared by all modules
  // --
  dependencies {
    testImplementation libs.junitJupiterApi
    testRuntimeOnly libs.junitJupiterEngine
  }
}

configure(coreProjects) {
  apply from: "${rootDir}/publishing.gradle"

  afterEvaluate {
    jar {
      inputs.property('moduleName', moduleName)
      manifest.attributes(
          'Automatic-Module-Name': moduleName
      )
    }
  }
}

def allTestCoverageFile = "${rootProject.projectDir}/build/reports/jacoco/report.xml"

task jacocoMergeTest(type: JacocoMerge) {
  destinationFile = file(allTestCoverageFile)
  executionData = project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
}

task jacocoRootTestReport(type: JacocoReport) {
  coreProjects.each { dependsOn("${it.name}:test") }
  coreProjects.each { dependsOn("${it.name}:jacocoTestReport") }

  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  subprojects.each {
    sourceSets it.sourceSets.main
  }

  onlyIf {
    true
  }

  reports {
    xml.required.set isCI
    xml.destination file(allTestCoverageFile)
    html.required.set false
    csv.required.set false
  }
}

idea {
  project {
    jdkName = 11
    languageLevel = 11
  }
}

sonarqube {
  properties {
    property "sonar.language", "java"
    property "sonar.projectKey", "vitorsalgado_puma4j"
    property "sonar.projectName", "puma4j"
    property "sonar.organization", "vitorsalgado"
    property "sonar.project.monorepo.enabled", true
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.links.scm", "https://github.com/vitorsalgado/puma4j"
    property "sonar.links.issue", "https://github.com/vitorsalgado/puma4j/issues"
    property "sonar.links.homepage", "https://github.com/vitorsalgado/puma4j"
    property "sonar.apex.pmd.reportPath", "${rootProject.projectDir}/build/reports/pmd/main.xml"
    property "sonar.coverage.jacoco.xmlReportPaths", "${allTestCoverageFile}"
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

subprojects {
  it.tasks.check.dependsOn rootProject.tasks.jacocoRootTestReport
}
