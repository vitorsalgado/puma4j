plugins {
  id "idea"
  id "com.github.spotbugs" version "5.0.0-beta.8" apply false
}

def Version = file("$rootDir/VERSION").text.trim()

apply from: "dependencies.gradle"
apply from: "setup.gradle"

ext {
  isCI = System.getenv("CI") == "true"

  publishableProjects = subprojects.findAll {
    p -> !p.name.contains("example") && !p.name.endsWith("-bom")
  }
}

allprojects {
  apply plugin: "jacoco"

  group "io.github.vitorsalgado.puma4j"
  version Version
  description "Easy and convenient way to load file resources into your tests using only annotations."

  repositories {
    mavenCentral()
  }
}

subprojects {
  apply plugin: "java"
  apply plugin: "checkstyle"
  apply plugin: "pmd"
  apply plugin: "com.github.spotbugs"
  apply from: "${rootDir}/lint.gradle"

  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11

  tasks.withType(JavaCompile) { compileTask ->
    sourceCompatibility = "11"
    targetCompatibility = "11"
    options.encoding = 'UTF-8'
    options.deprecation = true
    options.compilerArgs += ["-Xlint:-deprecation", "-Xlint:unchecked", "-parameters"]
  }

  test {
    useJUnitPlatform()

    testLogging {
      maxParallelForks Runtime.runtime.availableProcessors().intdiv(2) ?: 1
      forkEvery 10
      events "passed", "skipped", "failed"
      showStackTraces true
      exceptionFormat "full"
    }
  }

  spotbugsMain {
    reports {
      html {
        enabled = true
        destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
      }
      xml.enabled = false
    }
  }

  // Common dependencies shared by all modules
  // --
  dependencies {
    testImplementation libs.junitJupiterApi
    testRuntimeOnly libs.junitJupiterEngine
  }
}

configure(publishableProjects) {
  apply plugin: "java-library"
  apply plugin: "maven-publish"
  apply plugin: "signing"
  apply from: "${rootDir}/publishing.gradle"
}

task codeCoverageReport(type: JacocoReport) {
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  subprojects.each {
    sourceSets it.sourceSets.main
  }

  reports {
    xml.required.set isCI
    xml.destination file("${buildDir}/reports/jacoco/report.xml")
    html.required.set isCI
    csv.required.set false
  }
}

codeCoverageReport.dependsOn {
  subprojects*.test
}

idea {
  project {
    jdkName = 11
    languageLevel = 11
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
